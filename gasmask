#!/usr/bin/env bash
#
# gasmask :: subnet mask notation conversion tool
# requires: bash 4.0+
# gasmask is a Bash clone of the Unix utility 'whatmask' written by Joe Laffey

## Copyright (C) 2001-2003 Joe Laffey, Copyright (C) 2024-2025 Kyle Belleau
##
## 'whatmask' Author: Joe Laffey <joe@laffeycomputer.com>
## 'whatmask' URL: http://www.laffeycomputer.com/whatmask.html
##
## Author: Kyle Belleau <kylejbelleau@gmail.com>
## URL: https://github.com/beelleau/gasmask
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.

trap 'echo -e "\nSIGINT Received... exiting"; exit 130' SIGINT

err() {
  # send errors to standard error
  echo "[${0##*/}] error: $*" >&2
}

show_help() {
  # help option text
  echo "Usage: ${0##*/} <netmask or ip/netmask>"
  echo ""
  echo "Options:"
  echo "  -h, --help    Show this help menu"
  echo ""
  echo "Description: ${0##*/} is a network configuration tool."
  echo "Examples:"
  echo "$ gasmask /24"
  echo "$ gasmask 255.255.255.252"
  echo "$ gasmask 192.168.86.27/25"
  echo "$ gasmask 4.5.6.7/0xff000000"
  echo ""
  echo "See the README for more information, or"
  echo "run \"gasmask\" with no arguments, or"
  echo "visit https://github.com/beelleau/gasmask"
  echo ""
}

show_noarg() {
  # text to show when no argument is passed with script
  echo ""
  echo "gasmask is a Bash-written copy of Whatmask"
  echo ""
  echo "whatmask: Copyright (C) 2001-2003 Joe Laffey <joe@laffeycomputer.com>"
  echo "Visit http://www.laffeycomputer.com/whatmask.html for more information"
  echo "gasmask: Copyright (C) 2024-2025 Kyle Belleau <kylejbelleau@gmail.com>"
  echo "Visit https://github.com/beelleau/gasmask for more information"
  echo ""
  echo "This program is licensed under the GNU General Public License version 3"
  echo "or later (GPL-3.0-or-later)."
  echo ""
  echo "gasmask may be used two ways:"
  echo ""
  echo "Given a mask:          gasmask <CIDR bits>"
  echo "               - or -  gasmask <subnet mask>"
  echo "               - or -  gasmask <hex subnet mask>"
  echo "               - or -  gasmask <wildcard bit mask>"
  echo " NOTE: gasmask will autodetect the input and show you all four."
  echo ""
  echo ""
  echo "Given an ip/mask:      gasmask <IP address>/<netmask>"
  echo "       <netmask> may be one of the following:"
  echo "                       CIDR notation (e.g. \"24\")"
  echo "                       Netmask notation (e.g. \"255.255.255.0\")"
  echo "                       Hex Netmask notation (e.g. \"0xffffff00\")"
  echo "                       Wildcard bit notation (e.g. \"0.0.0.255\")"
  echo " NOTE: gasmask will autodetect the netmask format."
  echo ""
}

subnet_which_initial() {
  # determines which type of subnet value was entered in $1
  # possible outcomes: CIDR, subnet mask, subnet hexidecimal, wildcard bit
  #
  # ARG $1: anything that you may think is a subnetting value
  # RET: probable intended subnet mask notation type

  # check to see if we'll detect a hexadecimal subnet mask or
  # a cidr value
  if ! [[ "$1" =~ \. ]]; then
    [[ "$1" =~ ^"0x" ]] && echo -n "hex" || echo -n "cidr"
    return 0
  fi

  # the 0.0.0.0 check: the only special case
  # 0.0.0.0 (and 255.255.255.255) can be subnet masks or wildcard bit
  # we will always default to it being a subnet mask, though
  if [[ "$1" == "0.0.0.0" ]]; then
    echo -n "subnetmask"
    return 0
  fi

  if [[ "$1" =~ \. ]]; then
    # if we have an address, we'll check the first octet to decide if it is
    # a subnet mask or a wildcard mask
    local first_octet="${1%%\.*}"
    [[ "$first_octet" -gt 127 ]] && echo -n "subnetmask"
    [[ "$first_octet" -le 127 ]] && echo -n "wildcard"
    return 0
  fi

  err "\"${1}\" * subnet type could not be determined"
  return 1
}

validate_cidr() {
  # verifies the input cidr value is valid
  #
  # ARG $1: cidr
  # RET: 0=valid, 1=fail

  if [[ "$1" =~ ^([1-9]|[1-2][0-9]|3[0-2])$|^0$ ]]; then
    return 0
  fi

  err "CIDR notations must be a number between 0 and 32 inclusive!"
  return 1
}

validate_subnet() {
  # validates given subnet mask
  #
  # ARG $1: subnet mask
  # RET: 0=valid, 1=fail

  local -A valid_mask=(
    ["0.0.0.0"]=1 ["128.0.0.0"]=1 ["192.0.0.0"]=1 ["224.0.0.0"]=1
    ["240.0.0.0"]=1 ["248.0.0.0"]=1 ["252.0.0.0"]=1 ["254.0.0.0"]=1
    ["255.0.0.0"]=1 ["255.128.0.0"]=1 ["255.192.0.0"]=1 ["255.224.0.0"]=1
    ["255.240.0.0"]=1 ["255.248.0.0"]=1 ["255.252.0.0"]=1 ["255.254.0.0"]=1
    ["255.255.0.0"]=1 ["255.255.128.0"]=1 ["255.255.192.0"]=1
    ["255.255.224.0"]=1 ["255.255.240.0"]=1 ["255.255.248.0"]=1
    ["255.255.252.0"]=1 ["255.255.254.0"]=1 ["255.255.255.0"]=1
    ["255.255.255.128"]=1 ["255.255.255.192"]=1 ["255.255.255.224"]=1
    ["255.255.255.240"]=1 ["255.255.255.248"]=1 ["255.255.255.252"]=1
    ["255.255.255.254"]=1 ["255.255.255.255"]=1
  )

  [[ -n "${valid_mask["$1"]+_}" ]] && return 0

  err "\"${1}\" is not a valid subnet mask or wildcard bit mask!"
  return 1
}

validate_hex() {
  # validates given hexadecimal subnet mask
  #
  # ARG $1: hexadecimal subnet mask
  # RET: 0=valid, 1=fail

  local -A valid_hex=(
    ["0x00000000"]=1 ["0x80000000"]=1 ["0xc0000000"]=1 ["0xe0000000"]=1
    ["0xf0000000"]=1 ["0xf8000000"]=1 ["0xfc000000"]=1 ["0xfe000000"]=1
    ["0xff000000"]=1 ["0xff800000"]=1 ["0xffc00000"]=1 ["0xffe00000"]=1
    ["0xfff00000"]=1 ["0xfff80000"]=1 ["0xfffc0000"]=1 ["0xfffe0000"]=1
    ["0xffff0000"]=1 ["0xffff8000"]=1 ["0xffffc000"]=1 ["0xffffe000"]=1
    ["0xfffff000"]=1 ["0xfffff800"]=1 ["0xfffffc00"]=1 ["0xfffffe00"]=1
    ["0xffffff00"]=1 ["0xffffff80"]=1 ["0xffffffc0"]=1 ["0xffffffe0"]=1
    ["0xfffffff0"]=1 ["0xfffffff8"]=1 ["0xfffffffc"]=1 ["0xfffffffe"]=1
    ["0xffffffff"]=1
  )

  [[ -n "${valid_hex["$1"]+_}" ]] && return 0

  err "\"${1}\" is not a valid subnet mask!"
  echo "(Hex values need 8 chars [0-9][a-f][A-F])" >&2
  return 1
}

validate_wildcard() {
  # validates given wildcard bit
  #
  # ARG $1: wildcard bit
  # RET: 0=valid, 1=fail

  local -A valid_wildcard=(
    ["0.0.0.0"]=1 ["0.0.0.1"]=1 ["0.0.0.127"]=1 ["0.0.0.15"]=1 ["0.0.0.255"]=1
    ["0.0.0.3"]=1 ["0.0.0.31"]=1 ["0.0.0.63"]=1 ["0.0.0.7"]=1 ["0.0.1.255"]=1
    ["0.0.127.255"]=1 ["0.0.15.255"]=1 ["0.0.255.255"]=1 ["0.0.3.255"]=1
    ["0.0.31.255"]=1 ["0.0.63.255"]=1 ["0.0.7.255"]=1 ["0.1.255.255"]=1
    ["0.127.255.255"]=1 ["0.15.255.255"]=1 ["0.255.255.255"]=1
    ["0.3.255.255"]=1 ["0.31.255.255"]=1 ["0.63.255.255"]=1 ["0.7.255.255"]=1
    ["1.255.255.255"]=1 ["127.255.255.255"]=1 ["15.255.255.255"]=1
    ["255.255.255.255"]=1 ["3.255.255.255"]=1 ["31.255.255.255"]=1
    ["63.255.255.255"]=1 ["7.255.255.255"]=1
  )

  [[ -n "${valid_wildcard["$1"]+_}" ]] && return 0

  err "\"${1}\" is not a valid subnet mask or wildcard bit mask!"
  return 1
}

validate_ip_address() {
  # assess if a given ip address is a valid ipv4 address
  #
  # ARG $1: ip address
  # RET: 0 = valid ip address, 1 = invalid ip address

  local -r extra_error_msg="IP addresses take the form \"xxx.xxx.xxx.xxx\"
where each octet must be between 0 and 255 inclusive!"

  if ! [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    err "\"${1}\" is not a valid IP address!"
    echo -e "$extra_error_msg" >&2
    return 1
  fi

  local -a ip_array=()

  IFS='.' read -r -a ip_array <<< "$1"

  local octet_value=""
  for octet_value in "${ip_array[@]}"; do
    if [[ "$octet_value" != "0" && "$octet_value" =~ ^0 ]]; then
      err "\"${1}\" is not a valid IP address!"
      echo -e "$extra_error_msg" >&2
      return 1
    fi

    if (( octet_value < 0 || octet_value > 255 )); then
      err "\"${1}\" is not a valid IP address!"
      echo -e "$extra_error_msg" >&2
      return 1
    fi
  done

  return 0
}

cidr_to_subnetmask() {
  # converts a cidr value into a subnet mask
  #
  # ARG $1: a cidr value
  # RET: subnet mask

  # reassign $1 since we operate on it
  local cidr="$1" subnet_mask=""

  for (( i=0; i<4; i++ )); do
    if (( cidr >= 8 )); then
      # If CIDR is 8 or greater, the octet is 255
      subnet_mask+="255"
      cidr="$(( cidr - 8 ))"
    else
      # If CIDR is less than 8, calculate the octet value
      subnet_mask+="$(( 256 - (1 << (8 - cidr)) ))"
      cidr="0"
    fi
    (( i < 3 )) && subnet_mask+="."
  done

  echo -n "$subnet_mask"
}

hex_to_subnetmask() {
  # converts a subnet mask hexadecimal value into a subnet mask
  #
  # ARG $1: subnet mask hexadecimal
  # RET: subnet mask

  local hex="${1:2}" subnet_mask=""
  # iterate over the hexadecimal digits in pairs
  # - extract the current pair
  # - convert the hexadecimal pair to decimal octet
  # - append that value to the subnet mask to return
  for (( i=0; i<8; i+=2 )); do
    local hex_pair=""
    hex_pair="$(( 16#${hex:$i:2} ))"
    subnet_mask+="$hex_pair"
    (( i < 6 )) && subnet_mask+="."
  done

  echo -n "$subnet_mask"
}

wildcard_to_subnetmask() {
  # converts wildcard bit into a subnet mask
  #
  # ARG $1: wildcard bit
  # RET: subnet mask

  local -a wildcard_array=()
  local subnet_mask=""

  IFS='.' read -r -a wildcard_array <<< "$1"

  for (( i=0; i<4; i++ )); do
    local octet_value=""
    # calculate subnet octet value by subtracting the wildcard octet from 255
    octet_value="$(( 255 - wildcard_array[i] ))"
    subnet_mask+="$octet_value"
    (( i < 3 )) && subnet_mask+="."
  done

  echo -n "$subnet_mask"
}

subnetmask_to_cidr() {
  # converts a subnet mask to a cidr value
  #
  # ARG $1: subnet mask
  # RET: cidr

  local trailing_octets="${1##*255\.}"

  set -- \
      "0^^^128^192^224^240^248^252^254^" \
      "$(( (${#1} - ${#trailing_octets})*2 ))" \
      "${trailing_octets%%.*}"
  # remove the leading part of the CIDR array up to the first non-255 octet
  trailing_octets="${1%%"${3}"*}"

  # add number of leading 255 octets * 2 to
  # the number of bits set in the first non-255 octet
  echo -n "$(( ${2} + (${#trailing_octets}/4) ))"
}

subnetmask_to_hex() {
  # converts a subnet mask to a hexadecimal
  #
  # ARG $1: subnet mask
  # RET: hexadecimal subnet

  local -a subnet_array=()
  local hex="" hex_pair=""
  IFS='.' read -r -a subnet_array <<< "$1"

  local octet_value=""
  for octet_value in "${subnet_array[@]}"; do
    # convert each octet to a two digit hexadecimal value
    # printf does the magic to convert it
    hex_pair="$(printf '%02x' "$octet_value")"
    hex+="$hex_pair"
  done

  echo -n "0x${hex}"
}

subnetmask_to_wildcard() {
  # converts a subnet mask to a wilcard bit
  #
  # ARG $1: subnet mask
  # RET: wilcard bits

  local -a subnet_array=()
  local wildcard=""

  IFS='.' read -r -a subnet_array <<< "$1"

  for (( i=0; i<4; i++ )); do
    local octet_value=""
    octet_value="$(( 255 - subnet_array[i] ))"
    wildcard+="$octet_value"
    (( i < 3 )) && wildcard+="."
  done

  echo -n "$wildcard"
}

cidr_to_no_ips() {
  # uses the cidr to determine the number of usable ip addresses in a network
  #
  # ARG $1: cidr
  # RET: number of usable ip addresses in a network

  [[ "$1" -eq 32 ]] && echo -n "0" || echo -n $(( 2**(32 - ${1}) - 2 ))
}

get_ip_network_address() {
  # gather the network address given an ip and subnet
  #
  # ARG $1: ip address
  # ARG $2: subnet mask
  # RET: network address

  local -a ip_array=()
  local -a subnet_array=()
  local network_address=""

  IFS='.' read -r -a ip_array <<< "$1"
  IFS='.' read -r -a subnet_array <<< "$2"

  for (( i=0; i<4; i++ )); do
    local octet_value=""
    octet_value=$(( ip_array[i] & subnet_array[i] ))
    network_address+="$octet_value"
    (( i < 3 )) && network_address+="."
  done

  echo -n "$network_address"
}

get_ip_broadcast_address() {
  # gather the broadcast address given an ip and subnet
  #
  # ARG $1: ip address
  # ARG $2: subnet mask
  # RET: broadcast address

  local -a ip_array=()
  local -a subnet_array=()
  local broadcast_address=""

  IFS='.' read -r -a ip_array <<< "$1"
  IFS='.' read -r -a subnet_array <<< "$2"

  for (( i=0; i<4; i++ )); do
    local octet_value=""
    octet_value="$(( ip_array[i] | (255 - subnet_array[i]) ))"
    broadcast_address+="$octet_value"
    (( i < 3 )) && broadcast_address+="."
  done

  echo -n "$broadcast_address"
}

get_ip_first_address() {
  # gather the first usable ip address given a network address and subnet
  #
  # ARG $1: network ip address
  # ARG $2: subnet mask
  # RET: first usable ip address

  [[ "$2" =~ ^255\.255\.255\.25[45]$ ]] && echo -n "<none>" && return 0
  # if 255.255.255.25[45], then return "<none>"

  local octet_a="" octet_b="" octet_c="" octet_d="" first_usable_ip=""
  IFS='.' read -r octet_a octet_b octet_c octet_d <<< "$1"
  first_usable_ip="${octet_a}.${octet_b}.${octet_c}.$(( octet_d + 1 ))"

  echo -n "$first_usable_ip"
}

get_ip_last_address() {
  # gather the last usable ip address given a broadcast address and subnet
  #
  # ARG $1: broadcast ip address
  # ARG $2: subnet mask
  # RET: last usable ip address

  [[ "$2" =~ ^255\.255\.255\.25[45]$ ]] && echo -n "<none>" && return 0
  # if 255.255.255.25[45], then return "<none>"

  local octet_a="" octet_b="" octet_c="" octet_d="" last_usable_ip=""
  IFS='.' read -r octet_a octet_b octet_c octet_d <<< "$1"
  last_usable_ip="${octet_a}.${octet_b}.${octet_c}.$(( octet_d - 1 ))"

  echo -n "$last_usable_ip"
}

gather_gasmask_cidr() {
  # gather subnet information given a cidr
  #
  # ARG $1: cidr
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bit, usable ips

  validate_cidr "$1" || return 1

  local subnet_mask="" hex="" wildcard="" usable_ips=""
  subnet_mask="$(cidr_to_subnetmask "$1")"
  hex="$(subnetmask_to_hex "$subnet_mask")"
  wildcard="$(subnetmask_to_wildcard "$subnet_mask")"
  usable_ips="$(cidr_to_no_ips "$1")"

  echo -n "$1 $subnet_mask $hex $wildcard $usable_ips"
}

gather_gasmask_subnet() {
  # gather subnet information given a subnet mask
  #
  # ARG $1: subnet mask
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bit, usable ips

  validate_subnet "$1" || return 1

  local cidr="" hex="" wildcard="" usable_ips=""
  cidr="$(subnetmask_to_cidr "$1")"
  hex="$(subnetmask_to_hex "$1")"
  wildcard="$(subnetmask_to_wildcard "$1")"
  usable_ips="$(cidr_to_no_ips "$cidr")"

  echo -n "$cidr $1 $hex $wildcard $usable_ips"
}

gather_gasmask_hex() {
  # gather subnet information given a subnet mask
  #
  # ARG $1: subnet mask
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bit, usable ips

  validate_hex "$1" || return 1

  local cidr="" subnet_mask="" wildcard="" usable_ips=""
  subnet_mask="$(hex_to_subnetmask "$1")"
  cidr="$(subnetmask_to_cidr "$subnet_mask")"
  wildcard="$(subnetmask_to_wildcard "$subnet_mask")"
  usable_ips="$(cidr_to_no_ips "$cidr")"

  echo -n "$cidr $subnet_mask $1 $wildcard $usable_ips"
}

gather_gasmask_wildcard() {
  # gather subnet information given wildcard bit
  #
  # ARG $1: wildcard bit
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bit, usable ips

  validate_wildcard "$1" || return 1

  local cidr="" subnet_mask="" hex="" usable_ips=""
  subnet_mask="$(wildcard_to_subnetmask "$1")"
  cidr="$(subnetmask_to_cidr "$subnet_mask")"
  hex="$(subnetmask_to_hex "$subnet_mask")"
  usable_ips="$(cidr_to_no_ips "$cidr")"

  echo -n "$cidr $subnet_mask $hex $1 $usable_ips"
}

gather_gasmask_ip() {
  # gather ip information
  #
  # ARG $1: ip address
  # ARG $2: subnet mask
  # RET: ip addr, network addr, broadcast addr, first usable ip, last usable ip

  validate_ip_address "$1" || return 1

  local network_address="" broadcast_address="" first_usable="" last_usable=""
  network_address="$(get_ip_network_address "$1" "$2")"
  broadcast_address="$(get_ip_broadcast_address "$1" "$2")"
  first_usable="$(get_ip_first_address "$network_address" "$2")"
  last_usable="$(get_ip_last_address "$broadcast_address" "$2")"

  echo -n "$network_address $broadcast_address $first_usable $last_usable"
}

main() {
  set -eu

  # check for no argument
  if [[ $# -eq 0 ]]; then
    show_noarg
    exit 0
  fi

  # check if "-h" or "--help" was requested in $1
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
  fi

  local input_subnet_value="" ip_address="" whatmask_mode=""
  # there are two output formats used by `whatmask`
  # check for lack of "/" for the first mode
  # mode 1 means that we did NOT get an ip address in $1
  if ! [[ "$1" =~ "/" ]]; then
    input_subnet_value="$1"
    ip_address=""
    whatmask_mode="1"
  else
    # check if a "/" is present in $1. If so, split $1 into
    # $ip_address and $input_subnet_value
    # mode 2 means that we did get an ip address in $1
    input_subnet_value="${1#*/}"
    ip_address="${1%/*}"
    # if a slash was used without an ip address, then it's still assigned mode 1
    [[ -z "$ip_address" ]] && whatmask_mode="1"
    # if a slash was used with an ip address, then we assign mode 2
    [[ -n "$ip_address" ]] && whatmask_mode="2"
  fi

  local input_subnet_type=""
  # determie what initial subnet value given
  input_subnet_type="$(subnet_which_initial "$input_subnet_value")"

  # this case gathers subnet information
  local -a gasmask_subnet_array=()
  local subnet_info=""
  case "$input_subnet_type" in
    cidr) subnet_info="$(gather_gasmask_cidr "$input_subnet_value")" ;;
    subnetmask) subnet_info="$(gather_gasmask_subnet "$input_subnet_value")" ;;
    hex) subnet_info="$(gather_gasmask_hex "$input_subnet_value")" ;;
    wildcard) subnet_info="$(gather_gasmask_wildcard "$input_subnet_value")" ;;
  esac
  # read output from above into an array
  # we separated the output into a variable first instead of directly into array
  # to gracefully handle errors
  IFS=' ' read -r -a gasmask_subnet_array <<< "$subnet_info"

  if [[ "$whatmask_mode" -eq 2 ]]; then
    # below gathers ip information into an array
    local -a gasmask_ip_array=()
    local ip_info=""
    ip_info="$(gather_gasmask_ip "$ip_address" "${gasmask_subnet_array[1]}")"
    # gasmask_subnet_array[1] is the subnet mask value
    IFS=' ' read -r -a gasmask_ip_array <<< "$ip_info"
  fi

  if [[ "$whatmask_mode" -eq 1 ]]; then
    echo ""
    echo "---------------------------------------------"
    echo "       TCP/IP SUBNET MASK EQUIVALENTS"
    echo "---------------------------------------------"
    echo "CIDR = .....................: /${gasmask_subnet_array[0]}"
    echo "Netmask = ..................: ${gasmask_subnet_array[1]}"
    echo "Netmask (hex) = ............: ${gasmask_subnet_array[2]}"
    echo "Wildcard Bits = ............: ${gasmask_subnet_array[3]}"
    printf "Usable IP Addresses = ......: %'d\n" "${gasmask_subnet_array[4]}"
    echo ""
  fi

  if [[ "$whatmask_mode" -eq 2 ]]; then
    echo ""
    echo "------------------------------------------------"
    echo "           TCP/IP NETWORK INFORMATION"
    echo "------------------------------------------------"
    echo "IP Entered = ..................: $ip_address"
    echo "CIDR = ........................: /${gasmask_subnet_array[0]}"
    echo "Netmask = .....................: ${gasmask_subnet_array[1]}"
    echo "Netmask (hex) = ...............: ${gasmask_subnet_array[2]}"
    echo "Wildcard Bits = ...............: ${gasmask_subnet_array[3]}"
    echo "------------------------------------------------"
    echo "Network Address = .............: ${gasmask_ip_array[0]}"
    echo "Broadcast Address = ...........: ${gasmask_ip_array[1]}"
    printf "Usable IP Addresses = .........: %'d\n" "${gasmask_subnet_array[4]}"
    echo "First Usable IP Address = .....: ${gasmask_ip_array[2]}"
    echo "Last Usable IP Address = ......: ${gasmask_ip_array[3]}"
    echo ""
  fi
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
