#!/usr/bin/env bash
#
# gasmask :: subnet mask notation conversion tool
# requires: bash 4.0+
# gasmask is a Bash clone of the Unix utility 'whatmask' written by Joe Laffey

## Copyright (C) 2001-2003 Joe Laffey, Copyright (C) 2024-2025 Kyle Belleau
##
## 'whatmask' Author: Joe Laffey <joe@laffeycomputer.com>
## 'whatmask' URL: http://www.laffeycomputer.com/whatmask.html
##
## Author: Kyle Belleau <kylejbelleau@gmail.com>
## URL: https://github.com/beelleau/gasmask
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.

trap 'echo -e "\nSIGINT Received... exiting"; exit 130' SIGINT

err() {
  # send errors to standard error
  echo "[${0##*/}] error: $*" >&2
}

show_help() {
  # help option text
  echo "Usage: ${0##*/} <netmask or ip/netmask>"
  echo ""
  echo "Options:"
  echo "  -h, --help    Show this help menu"
  echo ""
  echo "Description: ${0##*/} is a network configuration tool."
  echo "Examples:"
  echo "$ gasmask /24"
  echo "$ gasmask 255.255.255.252"
  echo "$ gasmask 192.168.86.27/25"
  echo "$ gasmask 4.5.6.7/0xff000000"
  echo ""
  echo "See the README for more information, or"
  echo "run \"gasmask\" with no arguments, or"
  echo "visit https://github.com/beelleau/gasmask"
  echo ""
}

show_noarg() {
  # text to show when no argument is passed with script
  echo ""
  echo "gasmask is a Bash-written copy of Whatmask"
  echo ""
  echo "whatmask: Copyright (C) 2001-2003 Joe Laffey <joe@laffeycomputer.com>"
  echo "Visit http://www.laffeycomputer.com/whatmask.html for more information"
  echo "gasmask: Copyright (C) 2024-2025 Kyle Belleau <kylejbelleau@gmail.com>"
  echo "Visit https://github.com/beelleau/gasmask for more information"
  echo ""
  echo "This program is licensed under the GNU General Public License version 3"
  echo "or later (GPL-3.0-or-later)."
  echo ""
  echo "gasmask may be used two ways:"
  echo ""
  echo "Given a mask:          gasmask <CIDR bits>"
  echo "               - or -  gasmask <subnet mask>"
  echo "               - or -  gasmask <hex subnet mask>"
  echo "               - or -  gasmask <wildcard bit mask>"
  echo " NOTE: gasmask will autodetect the input and show you all four."
  echo ""
  echo ""
  echo "Given an ip/mask:      gasmask <IP address>/<netmask>"
  echo "       <netmask> may be one of the following:"
  echo "                       CIDR notation (e.g. \"24\")"
  echo "                       Netmask notation (e.g. \"255.255.255.0\")"
  echo "                       Hex Netmask notation (e.g. \"0xffffff00\")"
  echo "                       Wildcard bit notation (e.g. \"0.0.0.255\")"
  echo " NOTE: gasmask will autodetect the netmask format."
  echo ""
}

subnet_which_initial() {
  # determines which type of subnet value was entered in $1
  # possible outcomes: cidr, dot-decimal, hexidecimal, wildcard bit
  #
  # ARG $1: anything that you may think is a subnetting value
  # RET: intended subnet mask notation type from input

  # check to see if we'll detect a hexadecimal subnet mask or
  # a cidr value
  if ! [[ "$1" =~ \. ]]; then
    [[ "$1" =~ ^"0x" ]] && echo -n "hex" || echo -n "cidr"
    return 0
  fi

  # the 0.0.0.0 check: the only special case
  # 0.0.0.0 (and 255.255.255.255) can be subnet masks or wildcard bit
  # we will always default to it being a subnet mask, though
  if [[ "$1" == "0.0.0.0" ]]; then
    echo -n "subnetmask"
    return 0
  fi

  if [[ "$1" =~ \. ]]; then
    # if we have an address, we'll check the first octet to decide if it is
    # a subnet mask or a wildcard mask
    local first_octet="${1%%\.*}"
    [[ "$first_octet" -gt 127 ]] && echo -n "dotdecimal"
    [[ "$first_octet" -le 127 ]] && echo -n "wildcard"
    return 0
  fi

  # I don't think the below error is possible; but keeping it just in case
  err "\"${1}\" * subnet type could not be determined"
  return 1
}

validate_cidr() {
  # validates given cidr value
  #
  # ARG $1: cidr
  # RET: 0=valid, 1=fail

  if [[ "$1" =~ ^([1-9]|[1-2][0-9]|3[0-2])$|^0$ ]]; then
    return 0
  fi

  err "CIDR notations must be a number between 0 and 32 inclusive!"
  return 1
}

validate_dotdecimal() {
  # validates given subnet mask
  #
  # ARG $1: subnet mask
  # RET: 0=valid, 1=fail

  local -A valid_dotdecimal=(
    ["0.0.0.0"]=1 ["128.0.0.0"]=1 ["192.0.0.0"]=1 ["224.0.0.0"]=1
    ["240.0.0.0"]=1 ["248.0.0.0"]=1 ["252.0.0.0"]=1 ["254.0.0.0"]=1
    ["255.0.0.0"]=1 ["255.128.0.0"]=1 ["255.192.0.0"]=1 ["255.224.0.0"]=1
    ["255.240.0.0"]=1 ["255.248.0.0"]=1 ["255.252.0.0"]=1 ["255.254.0.0"]=1
    ["255.255.0.0"]=1 ["255.255.128.0"]=1 ["255.255.192.0"]=1
    ["255.255.224.0"]=1 ["255.255.240.0"]=1 ["255.255.248.0"]=1
    ["255.255.252.0"]=1 ["255.255.254.0"]=1 ["255.255.255.0"]=1
    ["255.255.255.128"]=1 ["255.255.255.192"]=1 ["255.255.255.224"]=1
    ["255.255.255.240"]=1 ["255.255.255.248"]=1 ["255.255.255.252"]=1
    ["255.255.255.254"]=1 ["255.255.255.255"]=1
  )

  [[ -n "${valid_dotdecimal["$1"]+_}" ]] && return 0

  err "\"${1}\" is not a valid subnet mask or wildcard bit mask!"
  return 1
}

validate_hex() {
  # validates given hexadecimal subnet mask
  #
  # ARG $1: hexadecimal subnet mask
  # RET: 0=valid, 1=fail

  # input was downcased in main() / handles upcase'd hex values
  local -A valid_hex=(
    ["0x00000000"]=1 ["0x80000000"]=1 ["0xc0000000"]=1 ["0xe0000000"]=1
    ["0xf0000000"]=1 ["0xf8000000"]=1 ["0xfc000000"]=1 ["0xfe000000"]=1
    ["0xff000000"]=1 ["0xff800000"]=1 ["0xffc00000"]=1 ["0xffe00000"]=1
    ["0xfff00000"]=1 ["0xfff80000"]=1 ["0xfffc0000"]=1 ["0xfffe0000"]=1
    ["0xffff0000"]=1 ["0xffff8000"]=1 ["0xffffc000"]=1 ["0xffffe000"]=1
    ["0xfffff000"]=1 ["0xfffff800"]=1 ["0xfffffc00"]=1 ["0xfffffe00"]=1
    ["0xffffff00"]=1 ["0xffffff80"]=1 ["0xffffffc0"]=1 ["0xffffffe0"]=1
    ["0xfffffff0"]=1 ["0xfffffff8"]=1 ["0xfffffffc"]=1 ["0xfffffffe"]=1
    ["0xffffffff"]=1
  )

  [[ -n "${valid_hex["$1"]+_}" ]] && return 0

  err "\"${1}\" is not a valid subnet mask!"
  echo "(Hex values need 8 chars [0-9][a-f][A-F])" >&2
  return 1
}

validate_wildcard() {
  # validates given wildcard bit
  #
  # ARG $1: wildcard bit
  # RET: 0=valid, 1=fail

  local -A valid_wildcard=(
    ["0.0.0.0"]=1 ["0.0.0.1"]=1 ["0.0.0.127"]=1 ["0.0.0.15"]=1 ["0.0.0.255"]=1
    ["0.0.0.3"]=1 ["0.0.0.31"]=1 ["0.0.0.63"]=1 ["0.0.0.7"]=1 ["0.0.1.255"]=1
    ["0.0.127.255"]=1 ["0.0.15.255"]=1 ["0.0.255.255"]=1 ["0.0.3.255"]=1
    ["0.0.31.255"]=1 ["0.0.63.255"]=1 ["0.0.7.255"]=1 ["0.1.255.255"]=1
    ["0.127.255.255"]=1 ["0.15.255.255"]=1 ["0.255.255.255"]=1
    ["0.3.255.255"]=1 ["0.31.255.255"]=1 ["0.63.255.255"]=1 ["0.7.255.255"]=1
    ["1.255.255.255"]=1 ["127.255.255.255"]=1 ["15.255.255.255"]=1
    ["255.255.255.255"]=1 ["3.255.255.255"]=1 ["31.255.255.255"]=1
    ["63.255.255.255"]=1 ["7.255.255.255"]=1
  )

  [[ -n "${valid_wildcard["$1"]+_}" ]] && return 0

  err "\"${1}\" is not a valid subnet mask or wildcard bit mask!"
  return 1
}

validate_ip_address() {
  # assess if a given ip address is a valid ipv4 address
  #
  # ARG $1: ip address
  # RET: 0 = valid ip address, 1 = invalid ip address

  local -r extra_error_msg="IP addresses take the form \"xxx.xxx.xxx.xxx\"
where each octet must be between 0 and 255 inclusive!"

  if ! [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    err "\"${1}\" is not a valid IP address!"
    echo -e "$extra_error_msg" >&2
    return 1
  fi

  local -a ip_array=()

  readarray -d '.' -t ip_array < <(printf '%s' "$1")

  local octet_value=""
  for octet_value in "${ip_array[@]}"; do
    if [[ "$octet_value" != "0" && "$octet_value" =~ ^0 ]]; then
      err "\"${1}\" is not a valid IP address!"
      echo -e "$extra_error_msg" >&2
      return 1
    fi

    if (( octet_value < 0 || octet_value > 255 )); then
      err "\"${1}\" is not a valid IP address!"
      echo -e "$extra_error_msg" >&2
      return 1
    fi
  done

  return 0
}

cidr_to_binary() {
  # converts a cidr value into binary form subnet mask
  #
  # ARG $1: a cidr value
  # RET: subnet mask in binary form

  local binary_mask=""

  for (( i=0; i<"$1"; i++ )); do
    binary_mask+="1"
  done

  for (( i="$1"; i<32; i++ )); do
    binary_mask+="0"
  done

  echo -n "$binary_mask"
}

dotdecimal_to_binary() {
  # converts a subnet mask from dot-decimal form into binary form
  #
  # ARG $1: a subnet mask in dot-decimal form
  # RET: subnet mask in binary form

  local binary_mask="" octet=""
  local -a octets=()

  readarray -d '.' -t octets < <(printf '%s' "$1")

  for octet in "${octets[@]}"; do
    local binary_octet=""
    for (( i=7; i>=0; i-- )); do
      if (( octet & (1 << i) )); then
        binary_octet+="1"
      else
        binary_octet+="0"
      fi
    done
    binary_mask+="$binary_octet"
  done

  echo -n "$binary_mask"
}

hex_to_binary() {
  # converts a hexadecimal subnet mask into binary form
  #
  # ARG $1: a hexadecimal subnet mask
  # RET: subnet mask in binary form

  local binary_mask=""
  local hex_mask="${1^^}" # upcase the hex value
  hex_mask="${hex_mask#0X}" # remove the leading '0X'

  local hex_char="" decimal_value="" binary_four_bit=""
  for (( i=0; i<${#hex_mask}; i++ )); do
    hex_char="${hex_mask:i:1}"
    binary_four_bit=""
    (( decimal_value = 16#$hex_char ))

    for (( j=3; j>=0; j-- )); do
      if (( decimal_value & (1 << j) )); then
        binary_four_bit+="1"
      else
        binary_four_bit+="0"
      fi
    done
    binary_mask+="$binary_four_bit"
  done

  echo -n "$binary_mask"
}

wildcard_to_binary() {
  # converts a wildcard mask into binary form subnet mask
  #
  # ARG $1: a wildcard mask
  # RET: subnet mask in binary form

  local binary_mask="" octet=""

  readarray -d '.' -t wildcard_octets < <(printf '%s' "$1")

  for octet in "${wildcard_octets[@]}"; do
    local binary_octet=""
    # convert from wildcard to dot-decimal subnet by inversing
    local subnet_decimal=$(( 255 - octet ))
    for (( i=7; i>=0; i-- )); do
      if (( subnet_decimal & (1 << i) )); then
        binary_octet+="1"
      else
        binary_octet+="0"
      fi
    done
    binary_mask+="$binary_octet"
  done

  echo -n "$binary_mask"
}

binary_to_cidr() {
  # converts a binary subnet mask into cidr format
  #
  # ARG $1: binary subnet mask
  # RET: cidr value

  local cidr_value=0

  for (( i=0; i<${#1}; i++ )); do
    if [[ "${1:i:1}" -eq 1 ]]; then
      (( cidr_value++ ))
    else
      break
    fi
  done

  echo -n "$cidr_value"
}

binary_to_dotdecimal() {
  # converts a binary subnet mask into dot-decimal format
  #
  # ARG $1: binary subnet mask
  # RET: dot-decimal subnet mask value

  local octet_binary="" dotdecimal_octet="" dot_decimal=""
  local -a dotdecimal_octets=()

  for (( i=0; i<4; i++ )); do
    octet_binary="${1:i*8:8}"
    (( dotdecimal_octet = 2#$octet_binary ))
    dotdecimal_octets[i]="$dotdecimal_octet"
  done

  local IFS='.' && dot_decimal="${dotdecimal_octets[*]}"
  echo -n "$dot_decimal"
}

binary_to_hex() {
  # converts a binary subnet mask into hexadecimal subnet mask
  #
  # ARG $1: binary subnet mask
  # RET: hexadecimal subnet mask

  local offset="" binary_segment="" hex_char="" hex=""

  for (( i=0; i<8; i++ )); do
    offset=$(( i * 4 ))
    binary_segment="${1:offset:4}"
    (( decimal_value = 2#$binary_segment ))
    printf -v hex_char "%x" "$decimal_value" # "%x" will downcase the final hex
    hex+="$hex_char"
  done

  echo -n "0x${hex}"
}

binary_to_wildcard() {
  # converts a binary subnet mask into wildcard mask
  #
  # ARG $1: binary subnet mask
  # RET: wildcard mask

  local inverted_binary_mask=""

  # invert binary mask first
  for (( i=0; i<${#1}; i++ )); do
    if [[ "${1:i:1}" = "1" ]]; then
      inverted_binary_mask+="0"
    else
      inverted_binary_mask+="1"
    fi
  done

  local octet_binary="" wildcard_octet="" wildcard=""
  local -a wildcard_octets=()
  for (( i=0; i<4; i++ )); do
    octet_binary="${inverted_binary_mask:i*8:8}"
    (( wildcard_octet = 2#$octet_binary ))
    wildcard_octets[i]="$wildcard_octet"
  done

  local IFS='.' && wildcard="${wildcard_octets[*]}"
  echo -n "$wildcard"
}

cidr_to_no_ips() {
  # uses a cidr value to determine the no. of usable ip addresses in a network
  #
  # ARG $1: cidr
  # RET: number of usable ip addresses in a network

  [[ "$1" -eq 32 ]] && echo -n "0" || echo -n $(( 2**(32 - ${1}) - 2 ))
}

get_ip_network_address() {
  # gather the network address given an ip and subnet
  #
  # ARG $1: ip address
  # ARG $2: subnet mask
  # RET: network address

  local -a ip_array=()
  local -a subnet_array=()
  local network_address=""

  readarray -d '.' -t ip_array < <(printf '%s' "$1")
  readarray -d '.' -t subnet_array < <(printf '%s' "$2")

  for (( i=0; i<4; i++ )); do
    local octet_value=""
    octet_value=$(( ip_array[i] & subnet_array[i] ))
    network_address+="$octet_value"
    (( i < 3 )) && network_address+="."
  done

  echo -n "$network_address"
}

get_ip_broadcast_address() {
  # gather the broadcast address given an ip and subnet
  #
  # ARG $1: ip address
  # ARG $2: subnet mask
  # RET: broadcast address

  local -a ip_array=()
  local -a subnet_array=()
  local broadcast_address=""

  readarray -d '.' -t ip_array < <(printf '%s' "$1")
  readarray -d '.' -t subnet_array < <(printf '%s' "$2")

  for (( i=0; i<4; i++ )); do
    local octet_value=""
    octet_value="$(( ip_array[i] | (255 - subnet_array[i]) ))"
    broadcast_address+="$octet_value"
    (( i < 3 )) && broadcast_address+="."
  done

  echo -n "$broadcast_address"
}

get_ip_first_address() {
  # gather the first usable ip address given a network address and subnet
  #
  # ARG $1: network ip address
  # ARG $2: dot-decimal subnet mask
  # RET: first usable ip address

  [[ "$2" =~ ^255\.255\.255\.25[45]$ ]] && echo -n "<none>" && return 0
  # if 255.255.255.25[45], then return "<none>"

  local octet_a="" octet_b="" octet_c="" octet_d="" first_usable_ip=""
  local IFS='.' && read -r octet_a octet_b octet_c octet_d < <(printf '%s' "$1")
  first_usable_ip="${octet_a}.${octet_b}.${octet_c}.$(( octet_d + 1 ))"

  echo -n "$first_usable_ip"
}

get_ip_last_address() {
  # gather the last usable ip address given a broadcast address and subnet
  #
  # ARG $1: broadcast ip address
  # ARG $2: subnet mask
  # RET: last usable ip address

  [[ "$2" =~ ^255\.255\.255\.25[45]$ ]] && echo -n "<none>" && return 0
  # if 255.255.255.25[45], then return "<none>"

  local octet_a="" octet_b="" octet_c="" octet_d="" last_usable_ip=""
  local IFS='.' && read -r octet_a octet_b octet_c octet_d < <(printf '%s' "$1")
  last_usable_ip="${octet_a}.${octet_b}.${octet_c}.$(( octet_d - 1 ))"

  echo -n "$last_usable_ip"
}

gather_gasmask_cidr() {
  # gather subnet information when given a cidr
  #
  # ARG $1: cidr
  # RET: cidr, dotdecimal, hexadecimal, wildcard bit, usable ips

  local binary_subnet_mask="" dotdecimal="" wildcard="" hex="" usable_ips=""
  binary_subnet_mask="$(cidr_to_binary "$1")"
  dotdecimal="$(binary_to_dotdecimal "$binary_subnet_mask")"
  hex="$(binary_to_hex "$binary_subnet_mask")"
  wildcard="$(binary_to_wildcard "$binary_subnet_mask")"
  usable_ips="$(cidr_to_no_ips "$1")"

  echo -n "$1 $dotdecimal $hex $wildcard $usable_ips"
}

gather_gasmask_dotdecimal() {
  # gather subnet information when given a dot-decimal subnet mask
  #
  # ARG $1: dot-decimal subnet mask
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bit, usable ips

  local binary_subnet_mask="" cidr="" hex="" wildcard="" usable_ips=""
  binary_subnet_mask="$(dotdecimal_to_binary "$1")"
  cidr="$(binary_to_cidr "$binary_subnet_mask")"
  hex="$(binary_to_hex "$binary_subnet_mask")"
  wildcard="$(binary_to_wildcard "$binary_subnet_mask")"
  usable_ips="$(cidr_to_no_ips "$cidr")"

  echo -n "$cidr $1 $hex $wildcard $usable_ips"
}

gather_gasmask_hex() {
  # gather subnet information given a subnet mask
  #
  # ARG $1: subnet mask
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bit, usable ips

  local binary_subnet_mask="" cidr="" dotdecimal="" wildcard="" usable_ips=""
  binary_subnet_mask="$(hex_to_binary "$1")"
  cidr="$(binary_to_cidr "$binary_subnet_mask")"
  dotdecimal="$(binary_to_dotdecimal "$binary_subnet_mask")"
  wildcard="$(binary_to_wildcard "$binary_subnet_mask")"
  usable_ips="$(cidr_to_no_ips "$cidr")"

  echo -n "$cidr $dotdecimal $1 $wildcard $usable_ips"
}

gather_gasmask_wildcard() {
  # gather subnet information given wildcard bit
  #
  # ARG $1: wildcard bit
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bit, usable ips

  local binary_subnet_mask="" cidr="" dotdecimal="" hex="" usable_ips=""
  binary_subnet_mask="$(wildcard_to_binary "$1")"
  cidr="$(binary_to_cidr "$binary_subnet_mask")"
  dotdecimal="$(binary_to_dotdecimal "$binary_subnet_mask")"
  hex="$(binary_to_hex "$binary_subnet_mask")"
  usable_ips="$(cidr_to_no_ips "$cidr")"

  echo -n "$cidr $dotdecimal $hex $1 $usable_ips"
}

gather_gasmask_ip() {
  # gather ip information
  #
  # ARG $1: ip address
  # ARG $2: dot-decimal subnet mask
  # RET: ip addr, network addr, broadcast addr, first usable ip, last usable ip

  local network_address="" broadcast_address="" first_usable="" last_usable=""
  network_address="$(get_ip_network_address "$1" "$2")"
  broadcast_address="$(get_ip_broadcast_address "$1" "$2")"
  first_usable="$(get_ip_first_address "$network_address" "$2")"
  last_usable="$(get_ip_last_address "$broadcast_address" "$2")"

  echo -n "$network_address $broadcast_address $first_usable $last_usable"
}

print_gasmask() {
  # prints the standard whatmask/gasmask output
  #
  # ARG $1-5: the $gasmask_subnet_array
  # RET: None, prints output to stdout

  echo ""
  echo "---------------------------------------------"
  echo "       TCP/IP SUBNET MASK EQUIVALENTS"
  echo "---------------------------------------------"
  echo "CIDR = .....................: /${1}"
  echo "Netmask = ..................: ${2}"
  echo "Netmask (hex) = ............: ${3}"
  echo "Wildcard Bits = ............: ${4}"
  printf "Usable IP Addresses = ......: %'d\n" "${5}"
  echo ""
}

print_gasmask_ip() {
  # prints the whatmask/gasmask output that includes ip information
  #
  # ARG $1-5: the $gasmask_subnet_array
  # ARG $6-9: the $gasmask_ip_array
  # ARG $10: ip addr
  # RET: None, prints output to stdout

  echo ""
  echo "------------------------------------------------"
  echo "           TCP/IP NETWORK INFORMATION"
  echo "------------------------------------------------"
  echo "IP Entered = ..................: ${10}"
  echo "CIDR = ........................: /${1}"
  echo "Netmask = .....................: ${2}"
  echo "Netmask (hex) = ...............: ${3}"
  echo "Wildcard Bits = ...............: ${4}"
  echo "------------------------------------------------"
  echo "Network Address = .............: ${6}"
  echo "Broadcast Address = ...........: ${7}"
  printf "Usable IP Addresses = .........: %'d\n" "${5}"
  echo "First Usable IP Address = .....: ${8}"
  echo "Last Usable IP Address = ......: ${9}"
  echo ""
}

main() {
  set -eu

  # check for no argument
  if [[ $# -eq 0 ]]; then
    show_noarg
    exit 0
  fi
  # check if "-h" or "--help" was requested in $1
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
  fi

  # downcase input to allow for upcase'd hex values
  local input_subnet_value="${1,,}"
  local ip_address="" whatmask_mode=""
  # there are two output formats used by `whatmask`
  # check for lack of "/" for the first mode
  # whatmask_mode=1 means that we did NOT get an ip address in $1
  if ! [[ "$input_subnet_value" =~ "/" ]]; then
    whatmask_mode="1"
  else
    # if a "/" is present in $1, split $1 into $ip_address and $input_value
    # $whatmask_mode=2 means that we did get an ip address in $1
    input_subnet_value="${input_subnet_value#*/}"
    ip_address="${1%/*}"
    # if a slash was used WITHOUT ip address, then it's still assigned mode 1
    # because it is interpreted to be a CIDR value (e.g. /24)
    [[ -z "$ip_address" ]] && whatmask_mode="1"
    # if a slash was used with an ip address, then we assign mode 2
    [[ -n "$ip_address" ]] && whatmask_mode="2"
  fi

  local input_subnet_type=""
  # determine what initial subnet value given
  input_subnet_type="$(subnet_which_initial "$input_subnet_value")"

  # this case gathers subnet information
  local -a gasmask_subnet_array=()
  case "$input_subnet_type" in
    cidr)
      validate_cidr "$input_subnet_value" || exit 1
      readarray -d ' ' -t gasmask_subnet_array < \
                <(gather_gasmask_cidr "$input_subnet_value")
      ;;
    dotdecimal)
      validate_dotdecimal "$input_subnet_value" || exit 1
      readarray -d ' ' -t gasmask_subnet_array < \
                <(gather_gasmask_dotdecimal "$input_subnet_value")
      ;;
    hex)
      validate_hex "$input_subnet_value" || exit 1
      readarray -d ' ' -t gasmask_subnet_array < \
                <(gather_gasmask_hex "$input_subnet_value")
      ;;
    wildcard)
      validate_wildcard "$input_subnet_value" || exit 1
      readarray -d ' ' -t gasmask_subnet_array < \
                <(gather_gasmask_wildcard "$input_subnet_value")
      ;;
  esac

  if [[ "$whatmask_mode" -eq 2 ]]; then
    validate_ip_address "$ip_address" || exit 1
    # below gathers ip information into an array
    local -a gasmask_ip_array=()
    readarray -d ' ' -t gasmask_ip_array < \
              <(gather_gasmask_ip "$ip_address" "${gasmask_subnet_array[1]}")
  fi

  if [[ "$whatmask_mode" -eq 1 ]]; then
    print_gasmask "${gasmask_subnet_array[@]}"
    exit 0
  fi

  if [[ "$whatmask_mode" -eq 2 ]]; then
    print_gasmask_ip "${gasmask_subnet_array[@]}" \
                     "${gasmask_ip_array[@]}" \
                     "$ip_address"
    exit 0
  fi
}

[[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
