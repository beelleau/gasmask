#!/usr/bin/env bash

# gaskmask is a Bash-written clone of the Unix utility 'whatmask'

## Copyright (C) 2001-2003 Joe Laffey
## Copyright (C) 2024 Kyle Belleau

## 'whatmask' Author: Joe Laffey <joe@laffeycomputer.com>
## 'whatmask' URL: http://www.laffeycomputer.com/whatmask.html
## Author: Kyle Belleau <kylejbelleau@gmail.com>
## URL: https://github.com/beelleau/gasmask

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <https://www.gnu.org/licenses/>.

# gasmask :: subnet mask notation conversion tool
# requires: bash 4.0+

trap 'echo -e "\nSIGINT Received... exiting"; exit 130' SIGINT

err() {
  # send errors to standard error
  echo "[${0##*/}] error: $*" >&2
}

show_help() {
  # help option text
  echo "Usage: ${0##*/} <netmask or ip/netmask>"
  echo "Options:"
  echo "  -h, --help    Show this help menu"
  echo "Description: ${0##*/} is a network configuration tool."
  echo "Examples:"
  echo "$ gasmask /24"
  echo "$ gasmask 255.255.255.252"
  echo "$ gasmask 192.168.86.27/25"
  echo "$ gasmask 4.5.6.7/0xff000000"
  echo ""
  echo "See the README for more information, or"
  echo "run \"gasmask\" with no arguments, or"
  echo "visit https://github.com/beelleau/gasmask"
  echo ""
}

show_noarg() {
  echo ""
  echo "gasmask is a Bash-written copy of Whatmask"
  echo "whatmask: Copyright (C) 2001-2003 Joe Laffey <joe@laffeycomputer.com>"
  echo "Visit http://www.laffeycomputer.com/whatmask.html for more information"
  echo "gasmask: Copyright (C) 2024 Kyle Belleau <kylejbelleau@gmail.com>"
  echo "Visit https://github.com/beelleau/gasmask for more information"
  echo ""
  echo "This program is licensed under the GNU General Public License version 3"
  echo "or later (GPL-3.0-or-later)."
  echo ""
  echo "gasmask may be used two ways:"
  echo ""
  echo "Given a mask:          gasmask <CIDR bits>"
  echo "               - or -  gasmask <subnet mask>"
  echo "               - or -  gasmask <hex subnet mask>"
  echo "               - or -  gasmask <wildcard bit mask>"
  echo " NOTE: gasmask will autodetect the input and show you all four."
  echo ""
  echo ""
  echo "Given an ip/mask:      gasmask <IP address>/<netmask>"
  echo "       <netmask> may be one of the following:"
  echo "                       CIDR notation (e.g. \"24\")"
  echo "                       Netmask notation (e.g. \"255.255.255.0\")"
  echo "                       Hex Netmask notation (e.g. \"0xffffff00\")"
  echo "                       Wildcard bits notation (e.g. \"0.0.0.255\")"
  echo " NOTE: gasmask will autodetect the netmask format."
  echo ""
}

check_for_args() {
  # check for "-h", long version "--help", or no arguments
  #
  # ARG*: @

  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_help
    exit 0
  fi

  if [[ $# -eq 0 ]]; then
    show_noarg
    exit 0
  fi
}

subnet_which_initial() {
  # determines which type of subnet value was entered in $1
  # possible outcomes: CIDR, subnet mask, subnet hexidecimal, wildcard bits
  #
  # ARG $1: any integer that you may think is a subnetting value

  # check to see if we'll detect a hexadecimal subnet mask or
  # a cidr value
  if ! [[ "$1" =~ \. ]]; then
    [[ "$1" =~ ^0x ]] && echo "hex" || echo "cidr"
    return 0
  fi

  # the 0.0.0.0 check: the only special case
  # 0.0.0.0 (and 255.255.255.255) can be subnet masks or wildcard bits
  # we will always default to it being a subnet mask, though
  if [[ "$1" == "0.0.0.0" ]]; then
    echo "subnetmask"
    return 0
  fi

  local mask
  if [[ "$1" =~ \. ]]; then
    # if we have an address, we'll check the first octet to decide if it is
    # a subnet mask or a wildcard mask
    mask="${1%%.*}"
    [[ "$mask" -gt 127 ]] && echo "subnetmask"
    [[ "$mask" -le 127 ]] && echo "wildcard"
    return 0
  fi

  # return - input validation
  # a valid value should have returned already; if not, fail
  return 1
}

validate_cidr() {
  # verifies the input cidr value is valid
  #
  # ARG $1: cidr

  [[ "$1" =~ ^[0-9]+$ && "$1" -ge 0 && "$1" -le 32 ]] && return 0

  # return - input validation
  # a valid value should have returned already; if not, fail
  return 1
}

validate_subnet() {
  # validates given subnet mask
  #
  # ARG $1: subnet mask

  local -A valid_mask=(
    ["0.0.0.0"]=1 ["128.0.0.0"]=1 ["192.0.0.0"]=1 ["224.0.0.0"]=1
    ["240.0.0.0"]=1 ["248.0.0.0"]=1 ["252.0.0.0"]=1 ["254.0.0.0"]=1
    ["255.0.0.0"]=1 ["255.128.0.0"]=1 ["255.192.0.0"]=1 ["255.224.0.0"]=1
    ["255.240.0.0"]=1 ["255.248.0.0"]=1 ["255.252.0.0"]=1 ["255.254.0.0"]=1
    ["255.255.0.0"]=1 ["255.255.128.0"]=1 ["255.255.192.0"]=1
    ["255.255.224.0"]=1 ["255.255.240.0"]=1 ["255.255.248.0"]=1
    ["255.255.252.0"]=1 ["255.255.254.0"]=1 ["255.255.255.0"]=1
    ["255.255.255.128"]=1 ["255.255.255.192"]=1 ["255.255.255.224"]=1
    ["255.255.255.240"]=1 ["255.255.255.248"]=1 ["255.255.255.252"]=1
    ["255.255.255.254"]=1 ["255.255.255.255"]=1
  )

  [[ ${valid_mask["$1"]} ]] && return 0
  return 1
}

validate_hex() {
  # validates given hexadecimal subnet mask
  #
  # ARG $1: hexadecimal subnet mask

  local -A valid_hex=(
    ["0x00000000"]=1 ["0x80000000"]=1 ["0xc0000000"]=1 ["0xe0000000"]=1
    ["0xf0000000"]=1 ["0xf8000000"]=1 ["0xfc000000"]=1 ["0xfe000000"]=1
    ["0xff000000"]=1 ["0xff800000"]=1 ["0xffc00000"]=1 ["0xffe00000"]=1
    ["0xfff00000"]=1 ["0xfff80000"]=1 ["0xfffc0000"]=1 ["0xfffe0000"]=1
    ["0xffff0000"]=1 ["0xffff8000"]=1 ["0xffffc000"]=1 ["0xffffe000"]=1
    ["0xfffff000"]=1 ["0xfffff800"]=1 ["0xfffffc00"]=1 ["0xfffffe00"]=1
    ["0xffffff00"]=1 ["0xffffff80"]=1 ["0xffffffc0"]=1 ["0xffffffe0"]=1
    ["0xfffffff0"]=1 ["0xfffffff8"]=1 ["0xfffffffc"]=1 ["0xfffffffe"]=1
    ["0xffffffff"]=1
  )

  [[ ${valid_hex["$1"]} ]] && return 0
  return 1
}

validate_wildcard() {
  # validates given wildcard bits
  #
  # ARG $1: wildcard bits

  local -A valid_wildcard=(
    ["0.0.0.0"]=1 ["0.0.0.1"]=1 ["0.0.0.127"]=1 ["0.0.0.15"]=1 ["0.0.0.255"]=1
    ["0.0.0.3"]=1 ["0.0.0.31"]=1 ["0.0.0.63"]=1 ["0.0.0.7"]=1 ["0.0.1.255"]=1
    ["0.0.127.255"]=1 ["0.0.15.255"]=1 ["0.0.255.255"]=1 ["0.0.3.255"]=1
    ["0.0.31.255"]=1 ["0.0.63.255"]=1 ["0.0.7.255"]=1 ["0.1.255.255"]=1
    ["0.127.255.255"]=1 ["0.15.255.255"]=1 ["0.255.255.255"]=1
    ["0.3.255.255"]=1 ["0.31.255.255"]=1 ["0.63.255.255"]=1 ["0.7.255.255"]=1
    ["1.255.255.255"]=1 ["127.255.255.255"]=1 ["15.255.255.255"]=1
    ["255.255.255.255"]=1 ["3.255.255.255"]=1 ["31.255.255.255"]=1
    ["63.255.255.255"]=1 ["7.255.255.255"]=1
  )

  [[ ${valid_wildcard["$1"]} ]] && return 0
  return 1
}

cidr_to_subnetmask() {
  # converts a cidr value into a subnet mask
  #
  # ARG $1: a cidr value
  # RET: subnet mask

  # since we will operate on $1, let's reassign it now
  local cidr="$1" subnet_mask

  # iterate over each octet of what will be the subnet mask (iterations: 4)
  for ((i=0; i<4; i++)); do
    if (( cidr >= 8 )); then
      # If CIDR is 8 or greater, the octet is 255
      subnet_mask+="255"
      cidr=$(( cidr - 8 ))
    else
      # If CIDR is less than 8, calculate the octet value
      subnet_mask+=$(( 256 - (1 << (8 - cidr)) ))
      cidr=0
    fi
    (( i < 3 )) && subnet_mask+="."
  done

  # return
  echo -n "$subnet_mask"
}

hex_to_subnetmask() {
  # converts a subnet mask hexadecimal value into a subnet mask
  #
  # ARG $1: subnet mask hexadecimal
  # RET: subnet mask

  local hex subnet_mask octet_value

  hex=${1:2}
  # iterate over the hexadecimal digits in pairs
  # - extract the current pair
  # - convert the hexadecimal pair to decimal octet
  # - append that value to the subnet mask to return
  for ((i=0; i<8; i+=2)); do
    octet_value=$((16#${hex:$i:2}))
    subnet_mask+="$octet_value"
    (( i < 6 )) && subnet_mask+="."
  done

  # return
  echo -n "$subnet_mask"
}

wildcard_to_subnetmask() {
  # converts wildcard bits into a subnet mask
  #
  # ARG $1: wildcard bits
  # RET: subnet mask

  local -a octets_arr subnet_mask octet_value

  # convert wildcard bits to array of octets
  IFS='.' read -r -a octets_arr <<< "$1"

  for ((i=0; i<4; i++)); do
    # calculate subnet octet value by subtracting the wildcard octet from 255
    octet_value=$((255 - octets_arr[i]))
    subnet_mask+="$octet_value"
    (( i < 3 )) && subnet_mask+="."
  done

  # return
  echo -n "$subnet_mask"
}

subnetmask_to_cidr() {
  # converts a subnet mask to a cidr value
  #
  # ARG $1: subnet mask
  # RET: cidr

  # `to` should be named `trailing_octets`, but it's too long
  local to
  to=${1##*255.}
  set -- \
      "0^^^128^192^224^240^248^252^254^" "$(( (${#1} - ${#to})*2 ))" "${to%%.*}"
  to=${1%%"${3}"*}

  # return
  echo -n $(( ${2} + (${#to}/4) ))
}

subnetmask_to_hex() {
  # converts a subnet mask to a hexadecimal
  #
  # ARG $1: subnet mask
  # RET: hexadecimal subnet

  local -a octets_arr hex hex_pair

  # convert subnet mask to array of octets
  IFS='.' read -r -a octets_arr <<< "$1"

  local octet_value
  for octet_value in "${octets_arr[@]}"; do
    # convert each octet to a two digit hexadecimal value
    # printf does the magic to convert it
    hex_pair=$(printf '%02x' "$octet_value")
    hex+="$hex_pair"
  done

  # return
  echo -n "0x${hex}"
}

subnetmask_to_wildcard() {
  # converts a subnet mask to a wilcard bit
  #
  # ARG $1: subnet mask
  # RET: wilcard bits

  local -a subnet_arr wildcard octet

  # convert subnet mask to array of octets
  IFS='.' read -r -a subnet_arr <<< "$1"

  for ((i=0; i<4; i++)); do
    octet=$((255 - subnet_arr[i]))
    wildcard+="$octet"
    (( i < 3 )) && wildcard+="."
  done

  # return
  echo -n "$wildcard"
}

cidr_to_no_ips() {
  # uses the cidr to determine the number of usable ip addresses in a network
  #
  # ARG $1: cidr
  # RET: number of usable ip addresses in a network

  local cidr
  cidr="$1"

  [[ "$cidr" -eq 32 ]] && echo -n "0" || echo -n $(( 2**(32 - cidr) - 2))
}

validate_ip_address() {
  # assess if a given ip address is a valid ipv4 address
  #
  # ARG $1: ip address

  [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]] || return 1

  local -a ip_arr

  # convert ip address to array
  IFS='.' read -r -a ip_arr <<< "$1"

  local i
  for i in "${ip_arr[@]}"; do
    ((i < 0 || i > 255)) && return 1
  done

  # return
  return 0
}

get_ip_network_address() {
  # gather the network address given an ip and subnet
  #
  # ARG $1: ip address
  # ARG $2: subnet mask
  # RET: network address

  local -a ip_arr
  local -a subnet_arr
  local network_addr

  # convert IP and mask to arrays
  IFS='.' read -r -a ip_arr <<< "$1"
  IFS='.' read -r -a subnet_arr <<< "$2"

  # calculate network address
  for ((i=0; i<4; i++)); do
    local octet
    octet=$(( ip_arr[i] & subnet_arr[i] ))
    network_addr+="$octet"
    (( i < 3 )) && network_addr+="."
  done

  # return
  echo -n "$network_addr"
}

get_ip_broadcast_address() {
  # gather the broadcast address given an ip and subnet
  #
  # ARG $1: ip address
  # ARG $2: subnet mask
  # RET: broadcast address

  local -a ip_arr
  local -a subnet_arr
  local broadcast_addr

  # convert IP and mask to arrays
  IFS='.' read -r -a ip_arr <<< "$1"
  IFS='.' read -r -a subnet_arr <<< "$2"

  for ((i=0; i<4; i++)); do
    local octet
    octet=$((ip_arr[i] | (255 - subnet_arr[i])))
    broadcast_addr+="$octet"
    (( i < 3 )) && broadcast_addr+="."
  done

  # return
  echo -n "$broadcast_addr"
}

get_ip_first_address() {
  # gather the first usable ip address given a network address and subnet
  #
  # ARG $1: network ip address
  # ARG $2: subnet mask
  # RET: first usable ip address

  [[ "$2" =~ ^255\.255\.255\.25[45]$ ]] && echo -n "<none>" && return 0
  # if 255.255.255.25[45], then return "<none>"

  local ipa ipb ipc ipd first_usable

  IFS='.' read -r ipa ipb ipc ipd <<< "$1"
  first_usable="$ipa.$ipb.$ipc.$(( ipd + 1 ))"

  # return
  echo -n "$first_usable"
}

get_ip_last_address() {
  # gather the last usable ip address given a broadcast address and subnet
  #
  # ARG $1: broadcast ip address
  # ARG $2: subnet mask
  # RET: last usable ip address

  [[ "$2" =~ ^255\.255\.255\.25[45]$ ]] && echo -n "<none>" && return 0
  # if 255.255.255.25[45], then return "<none>"

  local ipa ipb ipc ipd last_usable

  IFS='.' read -r ipa ipb ipc ipd <<< "$1"
  last_usable="$ipa.$ipb.$ipc.$(( ipd - 1 ))"

  # return
  echo -n "$last_usable"
}

gather_gasmask_cidr() {
  # gather subnet information given a cidr
  #
  # ARG $1: cidr
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bits, usable ips

  # validate entered cidr
  validate_cidr "$1" || return 1

  local subnet_mask hex wildcard usable_ips

  # get subnet mask, hex, wildcard bits, usable ips
  subnet_mask=$(cidr_to_subnetmask "$1")
  hex=$(subnetmask_to_hex "$subnet_mask")
  wildcard=$(subnetmask_to_wildcard "$subnet_mask")
  usable_ips=$(cidr_to_no_ips "$1")

  # return
  echo -n "$1 $subnet_mask $hex $wildcard $usable_ips"
}

gather_gasmask_subnet() {
  # gather subnet information given a subnet mask
  #
  # ARG $1: subnet mask
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bits, usable ips

  # validate entered subnet mask
  validate_subnet "$1" || return 1

  local cidr hex wildcard usable_ips

  # get cidr, hex, wildcard bits, usable ips
  cidr=$(subnetmask_to_cidr "$1")
  hex=$(subnetmask_to_hex "$1")
  wildcard=$(subnetmask_to_wildcard "$1")
  usable_ips=$(cidr_to_no_ips "$cidr")

  # return
  echo -n "$cidr $1 $hex $wildcard $usable_ips"
}

gather_gasmask_hex() {
  # gather subnet information given a subnet mask
  #
  # ARG $1: subnet mask
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bits, usable ips

  # validate entered hex
  validate_hex "$1" || return 1

  local cidr subnet_mask wildcard usable_ips

  # get cidr, subnet mask, wildcard bits, usable ips
  subnet_mask=$(hex_to_subnetmask "$1")
  cidr=$(subnetmask_to_cidr "$subnet_mask")
  wildcard=$(subnetmask_to_wildcard "$subnet_mask")
  usable_ips=$(cidr_to_no_ips "$cidr")

  # return
  echo -n "$cidr $subnet_mask $1 $wildcard $usable_ips"
}

gather_gasmask_wildcard() {
  # gather subnet information given wildcard bits
  #
  # ARG $1: wildcard bits
  # RET: cidr, subnet mask, subnet mask hexadecimal, wildcard bits, usable ips

  # validate entered wildcard
  validate_wildcard "$1" || return 1

  local cidr subnet_mask hex usable_ips

  # get cidr, subnet mask, hex, usable ips
  subnet_mask=$(wildcard_to_subnetmask "$1")
  cidr=$(subnetmask_to_cidr "$subnet_mask")
  hex=$(subnetmask_to_hex "$subnet_mask")
  usable_ips=$(cidr_to_no_ips "$cidr")

  # return
  echo -n "$cidr $subnet_mask $hex $1 $usable_ips"
}

gather_gasmask_ip() {
  # gather ip information
  #
  # ARG $1: ip address
  # ARG $2: subnet mask
  # RET: ip addr, network addr, broadcast addr, first usable ip, last usable ip

  # validate entered ip address
  validate_ip_address "$1" || return 1

  local network_addr broadcast_addr first_usable last_usable

  # get network, broadcast, first and last usable
  network_addr=$(get_ip_network_address "$1" "$2")
  broadcast_addr=$(get_ip_broadcast_address "$1" "$2")
  first_usable=$(get_ip_first_address "$network_addr" "$2")
  last_usable=$(get_ip_last_address "$broadcast_addr" "$2")

  # return
  echo -n "$1 $network_addr $broadcast_addr $first_usable $last_usable"
}

cidr_fail() {
  # fail message for invalid cidr

  err "CIDR notations must be a number between 0 and 32 inclusive!"
  exit 1
}

subnetmask_wildcard_fail() {
  # fail message for invalid subnetmask
  #
  # ARG $1: subnet mask or wildcard bits

  err "\"${1}\" is not a valid subnet mask or wildcard bits mask!"
  exit 1
}

hex_fail() {
  # fail message for invalid hexadecimal subnet mask
  #
  # ARG $1: hexadecimal subnet mask

  err "\"${1}\" is not a valid subnet mask!"
  echo "(Hex values need 8 chars [0-9][a-f][A-F])"
  exit 1
}

ip_fail() {
  # fail message for invalid ip address
  #
  # ARG $1: ip address

  err "\"${1}\" is not a valid IP address!"
  echo "IP addresses take the form \"xxx.xxx.xxx.xxx\" where"
  echo "each octet (group of numbers separated by decimals) must be"
  echo "between 0 and 255 inclusive!"
  exit 1
}

main() {
  # verify that "-h" or "--help" was not requested in $1
  check_for_args "$@"

  local subnet_value_initial subnet_type_initial ip_address whatmask_mode
  # there are two output formats used by `whatmask`
  # check for lack of "/" for the first mode
  # mode 1 means that we did NOT get an ip address in $1
  if ! [[ "$1" =~ "/" ]]; then
    subnet_value_initial="$1"
    ip_address=""
    whatmask_mode="1"
  fi

  # check if a "/" is present in $1. If so, split $1 into
  # $ip_address and $subnet_value_initial
  # mode 2 means that we did get an ip address in $1
  if [[ "$1" =~ "/" ]]; then
    subnet_value_initial="${1#*/}"
    ip_address="${1%%/*}"
    # if a slash was used without an ip address, then it's still assigned mode 1
    [[ -z "$ip_address" ]] && whatmask_mode="1"
    # if a slash was used with an ip address, then we assign mode 2
    [[ -n "$ip_address" ]] && whatmask_mode="2"
  fi

  # determie what initial subnet value given
  subnet_type_initial=$(subnet_which_initial "$subnet_value_initial") || \
    err "\"$subnet_value_initial\" subnet type could not be determined"

  local subnet_output
  case "$subnet_type_initial" in
    cidr)
      subnet_output=$(gather_gasmask_cidr "$subnet_value_initial") || \
        cidr_fail
      ;;
    subnetmask)
      subnet_output=$(gather_gasmask_subnet "$subnet_value_initial") || \
        subnetmask_wildcard_fail "$subnet_value_initial"
      ;;
    hex)
      subnet_output=$(gather_gasmask_hex "$subnet_value_initial") || \
        hex_fail "$subnet_value_initial"
      ;;
    wildcard)
      subnet_output=$(gather_gasmask_wildcard "$subnet_value_initial") || \
        subnetmask_wildcard_fail "$subnet_value_initial"
  esac

  local subnet_cidr subnet_mask subnet_hex subnet_wildcard subnet_usable
  IFS=' ' read -r \
     subnet_cidr subnet_mask subnet_hex subnet_wildcard subnet_usable \
     <<< "$subnet_output"

  if [[ "$whatmask_mode" -eq 2 ]]; then
    ip_output=$(gather_gasmask_ip "$ip_address" "$subnet_mask") || \
      ip_fail "$ip_address"

    local network_address broadcast_address first_address last_address
    IFS=' ' read -r \
       ip_address network_address broadcast_address first_address last_address \
       <<< "$ip_output"
  fi

  if [[ "$whatmask_mode" -eq 1 ]]; then
    echo ""
    echo "---------------------------------------------"
    echo "       TCP/IP SUBNET MASK EQUIVALENTS"
    echo "---------------------------------------------"
    echo "CIDR = .....................: /$subnet_cidr"
    echo "Netmask = ..................: $subnet_mask"
    echo "Netmask (hex) = ............: $subnet_hex"
    echo "Wildcard Bits = ............: $subnet_wildcard"
    printf "Usable IP Addresses = ......: %'d\n" "$subnet_usable"
    echo ""
  fi

  if [[ "$whatmask_mode" -eq 2 ]]; then
    echo ""
    echo "------------------------------------------------"
    echo "           TCP/IP NETWORK INFORMATION"
    echo "------------------------------------------------"
    echo "IP Entered = ..................: $ip_address"
    echo "CIDR = ........................: /$subnet_cidr"
    echo "Netmask = .....................: $subnet_mask"
    echo "Netmask (hex) = ...............: $subnet_hex"
    echo "Wildcard Bits = ...............: $subnet_wildcard"
    echo "------------------------------------------------"
    echo "Network Address = .............: $network_address"
    echo "Broadcast Address = ...........: $broadcast_address"
    printf "Usable IP Addresses = .........: %'d\n" "$subnet_usable"
    echo "First Usable IP Address = .....: $first_address"
    echo "Last Usable IP Address = ......: $last_address"
    echo ""
  fi
}

main "$@"
